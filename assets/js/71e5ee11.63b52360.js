"use strict";(self.webpackChunkanotega=self.webpackChunkanotega||[]).push([[750],{228:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>t,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>d,toc:()=>c});var a=o(5893),r=o(1151);const n={sidebar_position:1},i="Views",d={id:"Django/views",title:"Views",description:"Views s\xe3o respons\xe1veis por receber uma requisi\xe7\xe3o HTTP(request), realiza um processamento solicitado para aquela View e retorna uma resposta HTTP(response). No Django, as views s\xe3o implementadas como fun\xe7\xf5es ou classes que geralmente s\xe3o mapeadas para URLs espec\xedficas em um arquivo de roteamento, como o urls.py e possuem o m\xe9todo HTTP correspondente, como GET, POST, PUT, DELETE, entre outros.",source:"@site/docs/Django/views.md",sourceDirName:"Django",slug:"/Django/views",permalink:"/anotega/docs/Django/views",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Django/views.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"anotacoesSidebar",previous:{title:"Django",permalink:"/anotega/docs/category/django"},next:{title:"Serializers",permalink:"/anotega/docs/Django/serializers"}},t={},c=[{value:"Tipos",id:"tipos",level:2},{value:"Fun\xe7\xf5es",id:"fun\xe7\xf5es",level:3},{value:"Classes",id:"classes",level:3},{value:"Views Gen\xe9ricas",id:"views-gen\xe9ricas",level:3},{value:"Views Baseadas em M\xe9todos",id:"views-baseadas-em-m\xe9todos",level:3},{value:"Querysets",id:"querysets",level:2},{value:"Exemplo",id:"exemplo",level:3},{value:"QueryParams",id:"queryparams",level:2},{value:"Dicion\xe1rio de Views",id:"dicion\xe1rio-de-views",level:2}];function l(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{id:"views",children:"Views"}),"\n",(0,a.jsxs)(s.p,{children:["Views s\xe3o respons\xe1veis por receber uma requisi\xe7\xe3o HTTP(",(0,a.jsx)(s.code,{children:"request"}),"), realiza um processamento solicitado para aquela View e retorna uma resposta HTTP(",(0,a.jsx)(s.code,{children:"response"}),"). No Django, as views s\xe3o implementadas como fun\xe7\xf5es ou classes que geralmente s\xe3o mapeadas para URLs espec\xedficas em um arquivo de roteamento, como o ",(0,a.jsx)(s.code,{children:"urls.py"})," e possuem o m\xe9todo HTTP correspondente, como ",(0,a.jsx)(s.code,{children:"GET"}),", ",(0,a.jsx)(s.code,{children:"POST"}),", ",(0,a.jsx)(s.code,{children:"PUT"}),", ",(0,a.jsx)(s.code,{children:"DELETE"}),", entre outros."]}),"\n",(0,a.jsx)(s.admonition,{title:"Retorno",type:"tip",children:(0,a.jsxs)(s.p,{children:["O retorno de uma view dever ser um objeto ",(0,a.jsx)(s.code,{children:"HttpResponse"}),", ",(0,a.jsx)(s.code,{children:"JsonResponse"}),", ",(0,a.jsx)(s.code,{children:"Redirect"}),", ",(0,a.jsx)(s.code,{children:"TemplateResponse"}),", entre outros."]})}),"\n",(0,a.jsx)(s.h2,{id:"tipos",children:"Tipos"}),"\n",(0,a.jsx)(s.p,{children:"H\xe1 v\xe1rias maneiras de implementar views no Django, como fun\xe7\xf5es, classes, views gen\xe9ricas, views baseadas em m\xe9todos, views baseadas em classes, entre outras. Cada uma dessas abordagens tem suas pr\xf3prias vantagens e desvantagens, e a escolha de qual usar depende do contexto espec\xedfico do projeto."}),"\n",(0,a.jsx)(s.h3,{id:"fun\xe7\xf5es",children:"Fun\xe7\xf5es"}),"\n",(0,a.jsxs)(s.p,{children:["As views baseadas em fun\xe7\xf5es s\xe3o a maneira mais simples de implementar uma view no Django. Elas s\xe3o definidas como fun\xe7\xf5es Python que recebem um objeto ",(0,a.jsx)(s.code,{children:"HttpRequest"})," como argumento e retornam um objeto ",(0,a.jsx)(s.code,{children:"HttpResponse"}),". As views baseadas em fun\xe7\xf5es s\xe3o \xfateis para implementar views simples que n\xe3o precisam de muita l\xf3gica ou manipula\xe7\xe3o de dados."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:'from django.http import HttpResponse\n\ndef my_view(request):\n    return HttpResponse("Hello, world!")\n'})}),"\n",(0,a.jsx)(s.h3,{id:"classes",children:"Classes"}),"\n",(0,a.jsxs)(s.p,{children:["As views baseadas em classes s\xe3o uma maneira mais avan\xe7ada de implementar views no Django. Elas s\xe3o definidas como classes Python que herdam de uma classe base fornecida pelo Django, como ",(0,a.jsx)(s.code,{children:"View"}),", ",(0,a.jsx)(s.code,{children:"TemplateView"}),", ",(0,a.jsx)(s.code,{children:"ListView"}),", ",(0,a.jsx)(s.code,{children:"DetailView"}),", entre outras. As views baseadas em classes s\xe3o \xfateis para implementar views mais complexas que precisam de mais l\xf3gica e manipula\xe7\xe3o de dados."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",metastring:"views.py",children:'from django.views import View\nfrom django.http import HttpResponse\n\nclass MyView(View):\n    def get(self, request):\n        return HttpResponse("Hello, world!")\n'})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"django.views.View"})," \xe9 uma classe base que fornece m\xe9todos para lidar com solicita\xe7\xf5es HTTP, como GET, POST, PUT, DELETE, entre outros. Para criar uma view baseada em classes, voc\xea deve criar uma subclasse de View e implementar os m\xe9todos correspondentes para cada tipo de solicita\xe7\xe3o HTTP que deseja lidar."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",metastring:"TemplateView.py",children:"from django.views.generic import TemplateView\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"django.views.generic.TemplateView"})," \xe9 uma classe base que fornece suporte para renderizar um modelo de template. Para criar uma view baseada em classes que renderiza um modelo de template, voc\xea deve criar uma subclasse de TemplateView e definir o atributo template_name com o nome do modelo de template que deseja renderizar."]}),"\n",(0,a.jsx)(s.h3,{id:"views-gen\xe9ricas",children:"Views Gen\xe9ricas"}),"\n",(0,a.jsx)(s.p,{children:"As views gen\xe9ricas s\xe3o uma maneira conveniente de implementar views comuns no Django. Elas s\xe3o fornecidas pelo Django como classes base que implementam funcionalidades comuns, como exibir uma lista de objetos, exibir um objeto \xfanico, criar um novo objeto, atualizar um objeto existente, excluir um objeto, entre outros. As views gen\xe9ricas s\xe3o \xfateis para implementar views padr\xe3o que seguem um padr\xe3o comum de intera\xe7\xe3o com o banco de dados."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",metastring:"ListView.py",children:"from django.views.generic import ListView\nfrom .models import MyModel\n\nclass MyModelListView(ListView):\n    model = MyModel\n    template_name = 'my_model_list.html'\n    context_object_name = 'my_model_list'\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"django.views.generic.ListView"})," \xe9 uma classe base que fornece suporte para exibir uma lista de objetos de um modelo. Para criar uma view baseada em classes que exibe uma lista de objetos de um modelo, voc\xea deve criar uma subclasse de ListView e definir os atributos model, template_name e context_object_name conforme necess\xe1rio."]}),"\n",(0,a.jsx)(s.h3,{id:"views-baseadas-em-m\xe9todos",children:"Views Baseadas em M\xe9todos"}),"\n",(0,a.jsxs)(s.p,{children:["As views baseadas em m\xe9todos s\xe3o uma maneira de implementar views que respondem a solicita\xe7\xf5es HTTP com base no m\xe9todo HTTP usado. Elas s\xe3o definidas como m\xe9todos de uma classe Python que herda de uma classe base fornecida pelo Django, como ",(0,a.jsx)(s.code,{children:"View"}),", ",(0,a.jsx)(s.code,{children:"APIView"}),", entre outras. As views baseadas em m\xe9todos s\xe3o \xfateis para implementar views que respondem a diferentes tipos de solicita\xe7\xf5es HTTP de maneira flex\xedvel e eficiente."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:'\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass MyAPIView(APIView):\n    def get(self, request, *args, **kwargs):\n        return Response({"message": "Hello, world!"})\n'})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"rest_framework.views.APIView"})," \xe9 uma classe base fornecida pelo Django REST Framework que fornece suporte para criar APIs RESTful. Para criar uma view baseada em m\xe9todos que responde a solicita\xe7\xf5es HTTP com base no m\xe9todo usado, voc\xea deve criar uma subclasse de APIView e implementar os m\xe9todos correspondentes para cada tipo de solicita\xe7\xe3o HTTP que deseja lidar."]}),"\n",(0,a.jsx)(s.h2,{id:"querysets",children:"Querysets"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Querysets"})," s\xe3o objetos extremamente poderosos e vers\xe1teis que representam uma ",(0,a.jsx)(s.code,{children:"cole\xe7\xe3o de objetos"})," do banco de dados. Eles s\xe3o a interface principal para interagir com o banco de dados em muitos frameworks de desenvolvimento web, como o Django."]}),"\n",(0,a.jsxs)(s.p,{children:["Os ",(0,a.jsx)(s.strong,{children:"Querysets"})," s\xe3o usados para ",(0,a.jsx)(s.code,{children:"buscar objetos"})," do banco de dados de maneira eficiente, permitindo que voc\xea recupere apenas os dados que precisa. Eles tamb\xe9m podem ser filtrados de acordo com crit\xe9rios espec\xedficos, o que \xe9 \xfatil para encontrar um subconjunto de dados que atenda a determinadas condi\xe7\xf5es. Al\xe9m disso, os Querysets podem ser ordenados, o que \xe9 essencial para apresentar os dados de uma maneira que fa\xe7a sentido para os usu\xe1rios."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Querysets"})," tamb\xe9m s\xe3o ",(0,a.jsx)(s.code,{children:"mut\xe1veis"}),", o que significa que voc\xea pode atualiz\xe1-los para refletir as altera\xe7\xf5es nos dados subjacentes. E, se necess\xe1rio, voc\xea pode deletar objetos diretamente de um Queryset, o que \xe9 uma maneira eficiente de remover dados desnecess\xe1rios ou desatualizados do banco de dados."]}),"\n",(0,a.jsx)(s.h3,{id:"exemplo",children:"Exemplo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:"from myapp.models import MyModel\n\n# Retorna todos os objetos do modelo MyModel\nqueryset = MyModel.objects.all()\n\n# Filtra os objetos do modelo MyModel com o campo 'name' igual a 'John'\nqueryset = MyModel.objects.filter(name='John')\n\n# Ordena os objetos do modelo MyModel pelo campo 'age' em ordem decrescente\nqueryset = MyModel.objects.order_by('-age')\n\n# Limita os objetos do modelo MyModel a 10\nqueryset = MyModel.objects.all()[:10]\n"})}),"\n",(0,a.jsx)(s.h2,{id:"queryparams",children:"QueryParams"}),"\n",(0,a.jsxs)(s.p,{children:["Os ",(0,a.jsx)(s.strong,{children:"QueryParams"})," s\xe3o ",(0,a.jsx)(s.code,{children:"par\xe2metros que podem ser passados para a URL para filtrar os objetos que ser\xe3o retornados."})," Eles s\xe3o uma parte crucial da constru\xe7\xe3o de APIs RESTful, pois permitem que os clientes especifiquem exatamente quais dados eles querem receber."]}),"\n",(0,a.jsxs)(s.p,{children:["Os ",(0,a.jsx)(s.strong,{children:"QueryParams"})," podem ser ",(0,a.jsx)(s.code,{children:"usados para filtrar, ordenar e limitar os dados retornados"}),", tornando-os uma ferramenta poderosa para personalizar a resposta de uma API. Eles tamb\xe9m podem ser usados para paginar os resultados, o que \xe9 essencial para lidar com grandes conjuntos de dados."]}),"\n",(0,a.jsx)(s.h2,{id:"dicion\xe1rio-de-views",children:"Dicion\xe1rio de Views"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Context"})," - O contexto \xe9 um dicion\xe1rio Python que cont\xe9m dados que ser\xe3o passados para o template ao renderiz\xe1-lo. O contexto \xe9 usado para fornecer dados din\xe2micos ao template, como vari\xe1veis, listas, dicion\xe1rios, objetos, entre outros."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Template"})," - O template \xe9 um arquivo HTML que cont\xe9m a estrutura e o conte\xfado da p\xe1gina que ser\xe1 exibida ao usu\xe1rio. Os templates s\xe3o usados para separar a l\xf3gica de apresenta\xe7\xe3o do c\xf3digo Python"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Args"})," - Args \xe9 uma lista de argumentos posicionais que s\xe3o passados para a view ao chamar a fun\xe7\xe3o ou a classe que a define. Os args s\xe3o usados para fornecer dados \xe0 view que s\xe3o necess\xe1rios para processar a solicita\xe7\xe3o do cliente."]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,s,o)=>{o.d(s,{Z:()=>d,a:()=>i});var a=o(7294);const r={},n=a.createContext(r);function i(e){const s=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(n.Provider,{value:s},e.children)}}}]);