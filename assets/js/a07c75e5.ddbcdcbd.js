"use strict";(self.webpackChunkanotega=self.webpackChunkanotega||[]).push([[426],{8853:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var s=o(5893),n=o(1151);const t={sidebar_position:2},r="Serializers",i={id:"Django/serializers",title:"Serializers",description:"get_queryset",source:"@site/docs/Django/serializers.md",sourceDirName:"Django",slug:"/Django/serializers",permalink:"/anotega/docs/Django/serializers",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Django/serializers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"anotacoesSidebar",previous:{title:"Views",permalink:"/anotega/docs/Django/views"},next:{title:"Models",permalink:"/anotega/docs/Django/models"}},d={},c=[{value:"get_queryset",id:"get_queryset",level:2}];function u(e){const a={h1:"h1",h2:"h2",p:"p",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"serializers",children:"Serializers"}),"\n",(0,s.jsx)(a.h2,{id:"get_queryset",children:"get_queryset"}),"\n",(0,s.jsx)(a.p,{children:"O m\xe9todo super().update() chama a implementa\xe7\xe3o do m\xe9todo update() na superclasse do seu serializer. No caso de um ModelSerializer no Django REST Framework, a implementa\xe7\xe3o padr\xe3o do m\xe9todo update() atualiza a inst\xe2ncia do modelo com os dados validados e ent\xe3o chama instance.save()."}),"\n",(0,s.jsx)(a.p,{children:"Por outro lado, instance.save() \xe9 um m\xe9todo do modelo Django que salva a inst\xe2ncia atual no banco de dados."}),"\n",(0,s.jsx)(a.p,{children:"A diferen\xe7a entre os dois \xe9 que super().update() faz um pouco mais do que apenas salvar a inst\xe2ncia. Ele tamb\xe9m lida com a atualiza\xe7\xe3o dos campos relacionados. Por exemplo, se o seu modelo tem um campo ForeignKey, super().update() ir\xe1 cuidar de atualizar esse campo, enquanto instance.save() n\xe3o."}),"\n",(0,s.jsx)(a.p,{children:"Se voc\xea est\xe1 sobrescrevendo o m\xe9todo update() e quer manter a funcionalidade padr\xe3o (incluindo a atualiza\xe7\xe3o dos campos relacionados), voc\xea deve chamar super().update(). Se voc\xea s\xf3 quer salvar a inst\xe2ncia e n\xe3o precisa da funcionalidade adicional fornecida por super().update(), voc\xea pode chamar instance.save()."})]})}function l(e={}){const{wrapper:a}={...(0,n.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,a,o)=>{o.d(a,{Z:()=>i,a:()=>r});var s=o(7294);const n={},t=s.createContext(n);function r(e){const a=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(t.Provider,{value:a},e.children)}}}]);